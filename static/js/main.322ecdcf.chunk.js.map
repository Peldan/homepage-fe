{"version":3,"sources":["constants.ts","components/ModalWindow.tsx","helper.ts","components/ContentBox.tsx","components/Header.tsx","components/Weather.tsx","components/Home.tsx","index.tsx"],"names":["RSS_PRESETS","title","url","ModalWindow","props","state","handleInput","bind","e","this","setState","target","value","presets","map","preset","DropdownItem","onClick","onConfirm","Modal","show","isOpen","onHide","onClose","Header","closeButton","Title","Body","Tabs","defaultActiveKey","id","Tab","eventKey","DropdownButton","className","htmlFor","InputGroup","FormControl","onChange","Footer","Button","variant","React","Component","shouldBeRefreshed","lastRefreshed","Date","getMilliseconds","now","ContentBox","showModal","rssFeed","currentlyViewing","amountOfPages","activePage","lastUpdated","undefined","openModal","closeModal","clearData","getRSSFeed","populatePage","localStorage","setItem","String","JSON","stringify","fetch","method","body","then","res","json","Math","ceil","length","toSave","locallyStoredJson","getItem","savedState","parse","console","log","prevState","key","index","div","floor","mod","slice","rss","dto","Row","href","Image","src","imgUrl","fluid","rounded","description","pages","i","push","Pagination","Item","active","Col","xs","md","size","Navbar","bg","Weather","symbol","currentWeather","time","temperature","checkWeather","Symbol","location","coords","lat","round","latitude","pow","lon","longitude","current","timeSeries","parameters","values","validTime","toDateString","toString","stored","process","Spinner","animation","role","Home","rowCount","addRow","deleteRow","navigator","geolocation","getCurrentPosition","loc","r","status","count","row","cols","rows","buildCols","buildRows","Container","Jumbotron","color","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.322ecdcf.chunk.js","sourcesContent":["export const REFRESH_INTERVAL = 1000 * 60 * 5; //5 minutes\r\n\r\nexport interface RSS_PRESET {\r\n    title: string,\r\n    url: string\r\n}\r\n\r\nexport const RSS_PRESETS: RSS_PRESET[] = [\r\n    {title: \"Aftonbladet\", url: \"http://www.aftonbladet.se/rss.xml\"},\r\n    {title: \"Expressen\", url: \"https://feeds.expressen.se/nyheter/\"},\r\n    {title: \"SVT Nyheter\", url: \"http://www.svt.se/nyheter/rss.xml\"},\r\n    {title: \"SvD\", url: \"http://www.svd.se/?service=rss\"},\r\n    {title: \"Dagens Industri\", url: \"https://digital.di.se/rss\"},\r\n];","import {Modal} from \"react-bootstrap\";\r\nimport React from \"react\";\r\nimport Button from \"react-bootstrap/esm/Button\";\r\nimport {FormControl, InputGroup, Tab, Dropdown} from \"react-bootstrap/esm\";\r\nimport Tabs from \"react-bootstrap/esm/Tabs\";\r\nimport DropdownButton from \"react-bootstrap/esm/DropdownButton\";\r\nimport {RSS_PRESET, RSS_PRESETS} from \"../constants\";\r\nimport DropdownItem from \"react-bootstrap/esm/DropdownItem\";\r\n\r\nexport interface ModalWindowProps {\r\n    title: string;\r\n    onConfirm: (...args: any[]) => any;\r\n    onClose: (...args: any[]) => any;\r\n    isOpen: boolean;\r\n}\r\n\r\nexport interface ModalWindowState {\r\n    url: string\r\n}\r\n\r\nexport class ModalWindow extends React.Component<ModalWindowProps, ModalWindowState> {\r\n\r\n    constructor(props: ModalWindowProps) {\r\n        super(props);\r\n        this.state = {\r\n            url: \"\"\r\n        };\r\n        this.handleInput = this.handleInput.bind(this);\r\n    }\r\n\r\n    handleInput(e: any) {\r\n        this.setState({url: e.target.value});\r\n    }\r\n\r\n    render() {\r\n\r\n        const presets = RSS_PRESETS.map((preset) => {\r\n            return (\r\n                <DropdownItem onClick={() => this.props.onConfirm(preset.url)}>\r\n                    {preset.title}\r\n                </DropdownItem>\r\n            )\r\n        });\r\n\r\n        return (\r\n            <Modal show={this.props.isOpen} onHide={this.props.onClose}>\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title>{this.props.title}</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <Tabs defaultActiveKey=\"preset\" id=\"modal-tabs\">\r\n                        <Tab eventKey=\"preset\" title=\"Preset\">\r\n                            <DropdownButton className=\"mt-2\" id=\"dropdown-basic-button\" title=\"Välj nyhetssida\">\r\n                                {presets}\r\n                            </DropdownButton>\r\n                        </Tab>\r\n                        <Tab eventKey=\"custom\" title=\"Custom\">\r\n                            <label htmlFor=\"basic-url\">RSS URL</label>\r\n                            <InputGroup className=\"mb-3\">\r\n                                <FormControl onChange={this.handleInput} id=\"basic-url\"/>\r\n                            </InputGroup>\r\n                        </Tab>\r\n                    </Tabs>\r\n\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button variant=\"secondary\" onClick={this.props.onClose}>Close</Button>\r\n                    <Button variant=\"primary\" onClick={() => this.props.onConfirm(this.state.url)}>Save changes</Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n        );\r\n    }\r\n}","import {REFRESH_INTERVAL} from \"./constants\";\r\n\r\nexport function shouldBeRefreshed(lastRefreshed: Date): boolean {\r\n    if(!lastRefreshed){\r\n        return true;\r\n    }\r\n    return new Date(lastRefreshed).getMilliseconds() - Date.now() > REFRESH_INTERVAL;\r\n}\r\n\r\n// stored 13:00\r\n// 13:06 - 5 = 13:01","import React from \"react\";\r\nimport {Button, Pagination, Row, Image} from \"react-bootstrap/esm/\";\r\nimport {ModalWindow} from \"./ModalWindow\";\r\nimport {RssFeedDto} from \"../schema\";\r\nimport Col from \"react-bootstrap/esm/Col\";\r\nimport {shouldBeRefreshed} from \"../helper\";\r\nimport Navbar from \"react-bootstrap/esm/Navbar\";\r\n\r\nexport interface ContentBoxState {\r\n    showModal: boolean;\r\n    rssFeed: RssFeedDto[];\r\n    currentlyViewing: RssFeedDto[];\r\n    amountOfPages: number;\r\n    activePage: number;\r\n    lastUpdated: Date | undefined;\r\n    url: string;\r\n}\r\n\r\n\r\nexport interface ContentBoxProps {\r\n    id: number,\r\n}\r\n\r\n\r\nfunction defaultState(): ContentBoxState {\r\n    return {\r\n        showModal: false,\r\n        rssFeed: [],\r\n        currentlyViewing: [],\r\n        amountOfPages: 0,\r\n        activePage: 1,\r\n        lastUpdated: undefined,\r\n        url: \"\"\r\n    }\r\n}\r\n\r\n\r\nexport class ContentBox extends React.Component<ContentBoxProps, ContentBoxState> {\r\n\r\n    constructor(props: ContentBoxProps) {\r\n        super(props);\r\n        this.state = defaultState();\r\n        this.openModal = this.openModal.bind(this);\r\n        this.closeModal = this.closeModal.bind(this);\r\n        this.clearData = this.clearData.bind(this);\r\n        this.getRSSFeed = this.getRSSFeed.bind(this);\r\n        this.populatePage = this.populatePage.bind(this);\r\n    }\r\n\r\n    openModal() {\r\n        this.setState({showModal: true});\r\n    }\r\n\r\n    closeModal() {\r\n        this.setState({showModal: false});\r\n    }\r\n\r\n    clearData() {\r\n        this.setState(defaultState());\r\n        localStorage.setItem(String(this.props.id), JSON.stringify({}));\r\n    }\r\n\r\n    getRSSFeed(url: string) {\r\n        this.closeModal();\r\n        fetch('https://homepage-be.herokuapp.com/rss', {\r\n            method: \"POST\",\r\n            body: url\r\n        }).then((res) => {\r\n            return res.json();\r\n        }).then((json: RssFeedDto[]) => {\r\n            const now = new Date();\r\n            this.setState({rssFeed: json, amountOfPages: Math.ceil(json.length / 3), lastUpdated: now, url: url}, () => {\r\n                const toSave: Partial<ContentBoxState> = {\r\n                    rssFeed: json,\r\n                    lastUpdated: now,\r\n                    url: url\r\n                };\r\n                localStorage.setItem(String(this.props.id), JSON.stringify(toSave));\r\n                this.populatePage(1);\r\n            })\r\n        })\r\n    }\r\n\r\n    componentDidMount() {\r\n        const locallyStoredJson = localStorage.getItem(String(this.props.id));\r\n        if (locallyStoredJson) {\r\n            const savedState: Partial<ContentBoxState> = JSON.parse(locallyStoredJson);\r\n            console.log(savedState);\r\n            if(savedState.lastUpdated && savedState.url && shouldBeRefreshed(savedState.lastUpdated)){\r\n                console.log(\"content old.\")\r\n                this.getRSSFeed(savedState.url);\r\n            } else {\r\n                this.setState(prevState => ({\r\n                    ...prevState, ...savedState,\r\n                }), () => {\r\n                    this.setState({amountOfPages: Math.ceil(this.state.rssFeed.length / 3)}, () => {\r\n                        this.populatePage(1);\r\n                    });\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    populatePage(key: number) {\r\n        const div = Math.floor(this.state.rssFeed.length / this.state.amountOfPages);\r\n        const mod = this.state.rssFeed.length % this.state.amountOfPages;\r\n        let index: number;\r\n        if (key >= (this.state.amountOfPages - mod)) {\r\n            index = (div + 1) * (key - 1);\r\n        } else {\r\n            index = div * (key - 1);\r\n        }\r\n        this.setState({currentlyViewing: this.state.rssFeed.slice(index, index + 3), activePage: key});\r\n    }\r\n\r\n    render() {\r\n        const rss = this.state.currentlyViewing.map((dto) => {\r\n            return (\r\n                <Row key={dto.url}>\r\n                    <h1 className=\"heading\"><a href={dto.url}>{dto.title}</a></h1>\r\n                    <Image src={dto.imgUrl} fluid rounded/>\r\n                    <p>{dto.description}</p>\r\n                </Row>\r\n            )\r\n        });\r\n\r\n        let pages = [];\r\n        for (let i = 1; i <= this.state.amountOfPages; i++) {\r\n            pages.push(\r\n                <Pagination.Item key={i} active={this.state.activePage === i} onClick={() => this.populatePage(i)}>\r\n                    {i}\r\n                </Pagination.Item>\r\n            )\r\n        }\r\n\r\n        return (\r\n            <Col xs={3} md={3} className={\"box-shadow mx-5\"}>\r\n                <div className=\"column-content\">\r\n                    <ModalWindow title=\"Add RSS feed\" isOpen={this.state.showModal} onClose={this.closeModal}\r\n                                 onConfirm={this.getRSSFeed}/>\r\n                    {rss.length > 0 ? rss : <h1 className=\"heading\">Empty :(</h1>}\r\n                    <div className=\"d-flex justify-content-between align-items-center\">\r\n                        <Pagination>{pages}</Pagination>\r\n                        {rss.length > 0 ?\r\n                            <Button className={\"mb-2\"} variant=\"danger\" size=\"sm\" onClick={this.clearData}>-</Button>\r\n                            :\r\n                            <Button className={\"mb-2\"} variant=\"primary\" size=\"sm\" onClick={this.openModal}>+</Button>\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </Col>\r\n        )\r\n    }\r\n}","import Navbar from \"react-bootstrap/esm/Navbar\";\r\nimport Container from \"react-bootstrap/esm/Container\";\r\nimport Collapse from \"react-bootstrap/esm/Collapse\";\r\nimport React from \"react\";\r\n\r\nexport class Header extends React.Component<any, any> {\r\n    render() {\r\n        return (\r\n            <header>\r\n                <Navbar bg=\"dark\">\r\n                    <a className=\"navbar-brand\" href=\"#\">⌂</a>\r\n                </Navbar>\r\n            </header>\r\n        );\r\n    }\r\n}","import React from \"react\";\r\nimport Image from \"react-bootstrap/esm/Image\";\r\nimport {shouldBeRefreshed} from \"../helper\";\r\nimport Spinner from \"react-bootstrap/esm/Spinner\";\r\n\r\nexport interface WeatherReport {\r\n    time: string,\r\n    temperature: string\r\n}\r\n\r\nexport interface WeatherState {\r\n    currentWeather: WeatherReport,\r\n    lastUpdated: Date | undefined\r\n}\r\n\r\nexport interface WeatherProps {\r\n    location: Position | undefined\r\n}\r\n\r\nfunction defaultState(): WeatherState {\r\n    return {\r\n        currentWeather: {time: \"\", temperature: \"\"},\r\n        lastUpdated: undefined\r\n    }\r\n}\r\n\r\nexport class Weather extends React.Component<WeatherProps, WeatherState> {\r\n\r\n    private symbol: Symbol;\r\n\r\n    constructor(props: WeatherProps) {\r\n        super(props);\r\n        this.state = defaultState();\r\n        this.checkWeather = this.checkWeather.bind(this);\r\n        this.symbol = Symbol();\r\n    }\r\n\r\n    checkWeather() {\r\n        if (this.props.location && this.props.location.coords) {\r\n            const coords = this.props.location.coords;\r\n            const lat = Math.round(coords.latitude * Math.pow(10, 6)) / Math.pow(10, 6);\r\n            const lon = Math.round(coords.longitude * Math.pow(10, 6)) / Math.pow(10, 6);\r\n            fetch('https://opendata-download-metfcst.smhi.se/api/category/pmp3g/version/2/geotype/point/lon/'\r\n                + lon + '/lat/' + lat\r\n                + '/data.json', {method: 'get'})\r\n                .then((res) => {\r\n                    return res.json();\r\n                })\r\n                .then((json) => {\r\n                    const current = json.timeSeries[1];\r\n                    const temperature = current.parameters[11].values[0];\r\n                    this.setState({\r\n                        currentWeather: {\r\n                            time: new Date(current.validTime).toDateString(),\r\n                            temperature: temperature\r\n                        }\r\n                    }, () => {\r\n                        const toSave: Partial<WeatherState> = {\r\n                            currentWeather: this.state.currentWeather,\r\n                            lastUpdated: new Date()\r\n                        };\r\n                        localStorage.setItem(this.symbol.toString(), JSON.stringify(toSave));\r\n                    })\r\n                })\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(props: WeatherProps) {\r\n        if(props.location !== this.props.location || this.state.lastUpdated && shouldBeRefreshed(this.state.lastUpdated)){\r\n            this.checkWeather();\r\n        }\r\n        const stored = JSON.parse(localStorage.getItem(this.symbol.toString()) as string);\r\n        if (stored && stored.lastUpdated) {\r\n            if(shouldBeRefreshed(stored.lastUpdated)){\r\n                console.log(\"ska refreshas!! last updated i stored: \" + stored.lastUpdated);\r\n                this.checkWeather();\r\n            } else if(JSON.stringify(stored.currentWeather) != JSON.stringify(this.state.currentWeather)){\r\n                this.setState(stored);\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const currentWeather = this.state.currentWeather;\r\n        return (\r\n            <div className=\"weather mb-3\">\r\n                {currentWeather.temperature\r\n                    ?\r\n                    <div>\r\n                        <Image className=\"mb-1\" src={process.env.PUBLIC_URL + '/weather.png'} fluid/>\r\n                        <p><b>Temperature:</b>{currentWeather.temperature}°C</p>\r\n                    </div>\r\n                    :\r\n                    <Spinner animation=\"border\" role=\"status\">\r\n                    <span className=\"sr-only\">Loading...</span>\r\n                    </Spinner>}\r\n            </div>\r\n        )\r\n    }\r\n}","import React from \"react\";\r\nimport Jumbotron from \"react-bootstrap/esm/Jumbotron\";\r\nimport Container from \"react-bootstrap/esm/Container\";\r\nimport {ContentBox} from \"./ContentBox\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Button from \"react-bootstrap/esm/Button\";\r\nimport {Header} from \"./Header\";\r\nimport {Weather} from \"./Weather\";\r\n\r\n\r\nexport interface HomeState {\r\n    rowCount: number;\r\n    location: Position | undefined\r\n}\r\n\r\nfunction defaultState(): HomeState {\r\n    return {\r\n        rowCount: 1,\r\n        location: undefined\r\n    }\r\n}\r\n\r\nexport class Home extends React.Component<{}, HomeState> {\r\n\r\n    constructor() {\r\n        super({});\r\n        this.state = defaultState();\r\n        this.addRow = this.addRow.bind(this);\r\n        this.deleteRow = this.deleteRow.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        navigator.geolocation.getCurrentPosition((loc) => {\r\n            this.setState({location: loc});\r\n        });\r\n        fetch('https://homepage-be.herokuapp.com/wakeup').then(r => console.log(\"told backend to stop snoozing: \" + r.status));\r\n    }\r\n\r\n    addRow() {\r\n        this.setState({rowCount: this.state.rowCount + 1});\r\n    }\r\n\r\n    deleteRow() {\r\n        this.setState({rowCount: this.state.rowCount - 1});\r\n    }\r\n\r\n    buildCols(count: number, row: number) {\r\n        let cols = [];\r\n        for (let i = 1; i <= count; i++) {\r\n            cols.push(\r\n                <ContentBox id={row * i}/>\r\n            )\r\n        }\r\n        return cols;\r\n    }\r\n\r\n    buildRows(count: number) {\r\n        let rows = [];\r\n        for (let i = 1; i <= count; i++) {\r\n            rows.push(\r\n                <Row key={i} className={\"justify-content-center\"}>\r\n                    {this.buildCols(3, i)}\r\n                </Row>\r\n            )\r\n        }\r\n        return rows;\r\n    }\r\n\r\n    render() {\r\n        const rows = this.buildRows(this.state.rowCount);\r\n        return (\r\n            <div>\r\n                <Header/>\r\n                <Container>\r\n                    <Jumbotron className=\"text-center\" fluid>\r\n                        <Container>\r\n                            <Weather location={this.state.location}/>\r\n                            <h1 className=\"heading\">Simply the best homepage in the world</h1>\r\n                            <Button className={\"mx-1 my-2\"} color={\"primary\"} onClick={this.addRow}>Add row</Button>\r\n                            <Button className={\"my-2\"} variant=\"outline-secondary\" onClick={this.deleteRow}>Delete\r\n                                row</Button>\r\n                        </Container>\r\n                    </Jumbotron>\r\n                </Container>\r\n                <div className=\"rsscontainer py-5 bg-light\">\r\n                    {rows}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Home} from './components/Home';\nimport './css/style.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<Home/>, document.getElementById('root'));\n"],"sourceRoot":""}