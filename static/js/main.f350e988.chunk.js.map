{"version":3,"sources":["constants.ts","components/ModalWindow.tsx","helper.ts","components/card/RSSItemCard.tsx","components/card/RSSItemCardList.tsx","components/RSSPagination.tsx","components/card/ContainerCard.tsx","components/Header.tsx","components/Weather.tsx","components/Home.tsx","index.tsx"],"names":["RSS_PRESETS","title","url","ModalWindow","props","state","handleInput","bind","e","this","setState","target","value","presets","map","preset","i","DropdownItem","key","onClick","onConfirm","Modal","show","isOpen","onHide","onClose","Header","closeButton","Title","Body","Tabs","defaultActiveKey","id","Tab","eventKey","DropdownButton","variant","className","htmlFor","InputGroup","FormControl","onChange","Footer","Button","disabled","length","React","Component","shouldBeRefreshed","lastRefreshed","Date","now","getMilliseconds","RSSItemCard","description","imgUrl","Card","href","CardImg","src","RSSItemCardList","feed","RSSPagination","amountOfPages","onPageSelected","useState","activePage","setActivePage","pages","push","Pagination","Item","active","ContainerCard","showModal","setShowModal","RSSFeed","setRSSFeed","currentlyViewing","setCurrentlyViewing","setAmountOfPages","undefined","lastUpdated","setLastUpdated","setUrl","fetching","setFetching","isFirstRender","useRef","getRSSFeed","useCallback","closeModal","fetch","method","body","then","res","json","Math","ceil","populatePage","index","div","floor","mod","slice","Exception","localStorage","clear","useEffect","current","toSave","setItem","String","JSON","stringify","locallyStoredJson","getItem","savedState","parse","Spinner","animation","role","size","Navbar","bg","VIEW_MODE","Weather","symbol","currentWeather","time","temperature","checkWeather","Symbol","location","coords","lat","round","latitude","pow","lon","longitude","timeSeries","parameters","values","validTime","toDateString","toString","stored","Image","process","fluid","Home","rowCount","setRowCount","setLocation","NORMAL","viewMode","navigator","geolocation","getCurrentPosition","loc","r","console","log","status","buildCols","colCount","row","cols","Container","Jumbotron","color","CardColumns","rows","buildRows","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f350e988.chunk.js","sourcesContent":["export const REFRESH_INTERVAL = 1000 * 60 * 5; //5 minutes\n\nexport interface RSS_PRESET {\n    title: string,\n    url: string\n}\n\nexport const RSS_PRESETS: RSS_PRESET[] = [\n    {title: \"Aftonbladet\", url: \"https://rss.aftonbladet.se/rss2/small/pages/sections/nyheter/\"},\n    {title: \"SVT Nyheter\", url: \"http://www.svt.se/nyheter/rss.xml\"},\n    {title: \"SvD\", url: \"http://www.svd.se/?service=rss\"},\n    {title: \"Dagens Industri\", url: \"https://digital.di.se/rss\"},\n];","import {Modal} from \"react-bootstrap\";\nimport React from \"react\";\nimport Button from \"react-bootstrap/esm/Button\";\nimport {FormControl, InputGroup, Tab} from \"react-bootstrap/esm\";\nimport Tabs from \"react-bootstrap/esm/Tabs\";\nimport DropdownButton from \"react-bootstrap/esm/DropdownButton\";\nimport {RSS_PRESETS} from \"../constants\";\nimport DropdownItem from \"react-bootstrap/esm/DropdownItem\";\n\nexport interface ModalWindowProps {\n    title: string;\n    onConfirm: (...args: any[]) => any;\n    onClose: (...args: any[]) => any;\n    isOpen: boolean;\n}\n\nexport interface ModalWindowState {\n    url: string\n}\n\nexport class ModalWindow extends React.Component<ModalWindowProps, ModalWindowState> {\n\n    constructor(props: ModalWindowProps) {\n        super(props);\n        this.state = {\n            url: \"\"\n        };\n        this.handleInput = this.handleInput.bind(this);\n    }\n\n    handleInput(e: any) {\n        this.setState({url: e.target.value});\n    }\n\n    render() {\n\n        const presets = RSS_PRESETS.map((preset, i) => {\n            return (\n                <DropdownItem key={i} onClick={() => this.props.onConfirm(preset.url)}>\n                    {preset.title}\n                </DropdownItem>\n            )\n        });\n\n        return (\n            <Modal show={this.props.isOpen} onHide={this.props.onClose}>\n                <Modal.Header closeButton>\n                    <Modal.Title>{this.props.title}</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <Tabs defaultActiveKey=\"preset\" id=\"modal-tabs\">\n                        <Tab eventKey=\"preset\" title=\"Preset\">\n                            <DropdownButton variant=\"primary\" className=\"mt-4\" id=\"dropdown-basic-button\" title=\"Välj nyhetssida\">\n                                {presets}\n                            </DropdownButton>\n                        </Tab>\n                        <Tab eventKey=\"custom\" title=\"Custom\">\n                            <label className=\"mt-3\" htmlFor=\"basic-url\">RSS URL</label>\n                            <InputGroup className=\"mb-3\">\n                                <FormControl onChange={this.handleInput} id=\"basic-url\"/>\n                            </InputGroup>\n                        </Tab>\n                    </Tabs>\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button variant=\"secondary\" onClick={this.props.onClose}>Close</Button>\n                    <Button variant=\"primary\" disabled={this.state.url.length > 5} onClick={() => this.props.onConfirm(this.state.url)}>Save changes</Button>\n                </Modal.Footer>\n            </Modal>\n        );\n    }\n}","import {REFRESH_INTERVAL} from \"./constants\";\n\nexport function shouldBeRefreshed(lastRefreshed: Date): boolean {\n    if(!lastRefreshed){\n        return true;\n    }\n    return Date.now() - (new Date(lastRefreshed)).getMilliseconds() >= REFRESH_INTERVAL;\n}\n","import React from \"react\"\nimport { Card, CardImg } from \"react-bootstrap/esm/\";\n\nexport const RSSItemCard = ({ url, title, description, imgUrl }: { url: string, title: string, description: string, imgUrl: string }) => {\n    return (\n        <Card key={url} className={\"border-0\"}>\n            <h1 className=\"heading\"><a href={url}>{title}</a></h1>\n            <CardImg src={imgUrl} />\n            <p>{description}</p>\n        </Card>\n    )\n}","import React from \"react\";\nimport { RssFeedDto } from \"../../schema\";\nimport { RSSItemCard } from \"./RSSItemCard\";\n\nexport const RSSItemCardList = ({ feed }: { feed: RssFeedDto[] }): JSX.Element => {\n    return feed.length === 0 ? <h4 className={\"alignMiddle\"}>Add something!</h4>:<>\n        {feed.map(({ url, description, imgUrl, title }) => {\n            return (\n                <RSSItemCard key={url} url={url} description={description} imgUrl={imgUrl} title={title} />\n            )\n        })}\n    </>\n}","import React, { useState } from \"react\";\nimport { Pagination } from \"react-bootstrap/esm\";\n\nexport const RSSPagination = ({amountOfPages, onPageSelected}: {\n    amountOfPages: number,\n    onPageSelected: (page: number) => void}) => {\n    const [activePage, setActivePage] = useState(1);\n\n    let pages = [];\n    for (let i = 1; i <= amountOfPages; i++) {\n        pages.push(\n            <Pagination.Item variant=\"dark\" key={i} active={activePage === i}\n                             onClick={() => {\n                                 setActivePage(i);\n                                 onPageSelected(i);\n                             }}>\n                {i}\n            </Pagination.Item>\n        )\n    }\n    return <>{pages}</>;\n}","import React, { useState, useRef, useEffect, useCallback } from \"react\";\nimport {Button, Card, Pagination} from \"react-bootstrap/esm/\";\nimport {ModalWindow} from \"../ModalWindow\";\nimport {RssFeedDto} from \"../../schema\";\nimport {shouldBeRefreshed} from \"../../helper\";\nimport CardBody from \"react-bootstrap/esm/Card\";\nimport CardFooter from \"react-bootstrap/esm/Card\"\nimport Spinner from \"react-bootstrap/esm/Spinner\";\nimport { RSSItemCardList } from \"./RSSItemCardList\";\nimport { RSSPagination } from \"../RSSPagination\";\n\nexport interface ContainerCardProps {\n    id: number,\n}\n\ninterface PersistedState {\n    RSSFeed: RssFeedDto[],\n    lastUpdated: Date | undefined,\n    url: string,\n}\n\nexport const ContainerCard = ({id}: ContainerCardProps) => {\n\n    const [showModal, setShowModal] = useState(false);\n    const [RSSFeed, setRSSFeed] = useState<RssFeedDto[]>([]);\n    const [currentlyViewing, setCurrentlyViewing] = useState<RssFeedDto[]>([]);\n    const [amountOfPages, setAmountOfPages] = useState(0);\n    const [lastUpdated, setLastUpdated] = useState<Date | undefined>(undefined);\n    const [url, setUrl] = useState(\"\");\n    const [fetching, setFetching] = useState(false);\n\n    const isFirstRender = useRef(true);\n\n    const getRSSFeed = useCallback((url: string) => {\n        closeModal();\n        setFetching(true);\n        fetch('https://homepage-be.herokuapp.com/rss', {\n            method: \"POST\",\n            body: url\n        }).then((res) => {\n            return res.json();\n        }).then((json: RssFeedDto[]) => {\n            const now = new Date();\n            setRSSFeed(json);\n            setAmountOfPages(Math.ceil(json.length / 3));\n            setLastUpdated(now);\n            setUrl(url);\n            setFetching(false);\n        })\n    }, []);\n\n    const populatePage = useCallback((key: number) => {\n        const div = Math.floor(RSSFeed.length / amountOfPages);\n        const mod = RSSFeed.length % amountOfPages;\n        let index: number;\n        if (key >= (amountOfPages - mod)) {\n            index = (div + 1) * (key - 1);\n        } else {\n            index = div * (key - 1);\n        }\n        try {\n            setCurrentlyViewing(RSSFeed.slice(index, index + 3));\n        } catch (Exception){\n            localStorage.clear();\n        }\n    }, [RSSFeed, amountOfPages]);\n\n    useEffect(() => {\n        if(isFirstRender.current){\n            isFirstRender.current = false;\n        }\n        const toSave: PersistedState = {\n            RSSFeed: RSSFeed,\n            lastUpdated,\n            url,\n        };\n        localStorage.setItem(String(id), JSON.stringify(toSave));\n        populatePage(1);\n    }, [RSSFeed, lastUpdated, url, id, populatePage]);\n\n    useEffect(() => {\n        setAmountOfPages(Math.ceil(RSSFeed.length / 3));\n    }, [RSSFeed]);\n\n    useEffect(() => {\n        populatePage(1);\n    }, [amountOfPages, populatePage])\n\n    useEffect(() => {\n        const locallyStoredJson = localStorage.getItem(String(id));\n        if(locallyStoredJson){\n            const savedState: PersistedState = JSON.parse(locallyStoredJson);\n            if (savedState.lastUpdated && savedState.url && savedState.url.length > 5 && shouldBeRefreshed(savedState.lastUpdated)) {\n                getRSSFeed(savedState.url);\n            } else {\n                setLastUpdated(savedState.lastUpdated);\n                setRSSFeed(savedState.RSSFeed);\n                setUrl(savedState.url);\n            }\n        }\n    }, [id, getRSSFeed])\n\n    const resetState = (): void => {\n        setShowModal(false);\n        setRSSFeed([]);\n        setCurrentlyViewing([]);\n        setLastUpdated(undefined);\n        setUrl(\"\");\n        setFetching(false);\n    }\n\n    const openModal = (): void => {\n        setShowModal(true);\n    }\n\n    const closeModal = (): void => {\n        setShowModal(false);\n    }\n\n    const clearData = (): void => {\n        resetState();\n        localStorage.setItem(String(id), JSON.stringify({}));\n    }\n\n    return (\n            <Card>\n                <CardBody className=\"card-body column-content border-0\">\n                    {fetching\n                        ?\n                        <Spinner animation=\"border\" role=\"status\">\n                            <span className=\"sr-only\">Loading...</span>\n                        </Spinner>\n                        :\n                        <>\n                            <ModalWindow title=\"Add RSS feed\" isOpen={showModal} onClose={closeModal}\n                                         onConfirm={getRSSFeed}/>\n                            <RSSItemCardList feed={currentlyViewing}/>\n                        </>\n                    }\n                </CardBody>\n                <CardFooter className={\"d-flex justify-content-between align-items-center border-0\"}>\n                    <Pagination>\n                        <RSSPagination amountOfPages={amountOfPages} onPageSelected={populatePage}/>\n                    </Pagination>\n                    {currentlyViewing.length > 0 ?\n                        <Button className={\"mb-2\"} variant=\"danger\" size=\"sm\"\n                                onClick={clearData}>Empty</Button>\n                        :\n                        <Button className={\"mb-2\"} variant=\"light\" size=\"sm\"\n                                onClick={openModal}>Add</Button>\n                    }\n                </CardFooter>\n            </Card>\n    )\n}","import Navbar from \"react-bootstrap/esm/Navbar\";\nimport React from \"react\";\n\nexport class Header extends React.Component<any, any> {\n    render() {\n        return (\n            <header>\n                <Navbar bg=\"dark\">\n                    <a className=\"navbar-brand\" href=\"/\">⌂</a>\n                </Navbar>\n            </header>\n        );\n    }\n}","import React from \"react\";\nimport Image from \"react-bootstrap/esm/Image\";\nimport {shouldBeRefreshed} from \"../helper\";\nimport Spinner from \"react-bootstrap/esm/Spinner\";\n\nexport interface WeatherReport {\n    time: string,\n    temperature: string\n}\n\nexport interface WeatherState {\n    currentWeather: WeatherReport,\n    lastUpdated: Date | undefined\n}\n\nexport interface WeatherProps {\n    location: GeolocationPosition | undefined\n}\n\nfunction defaultState(): WeatherState {\n    return {\n        currentWeather: {time: \"\", temperature: \"\"},\n        lastUpdated: undefined\n    }\n}\n\nexport class Weather extends React.Component<WeatherProps, WeatherState> {\n\n    private symbol: Symbol;\n\n    constructor(props: WeatherProps) {\n        super(props);\n        this.state = defaultState();\n        this.checkWeather = this.checkWeather.bind(this);\n        this.symbol = Symbol();\n    }\n\n    checkWeather() {\n        if (this.props.location && this.props.location.coords) {\n            const coords = this.props.location.coords;\n            const lat = Math.round(coords.latitude * Math.pow(10, 6)) / Math.pow(10, 6);\n            const lon = Math.round(coords.longitude * Math.pow(10, 6)) / Math.pow(10, 6);\n            fetch('https://opendata-download-metfcst.smhi.se/api/category/pmp3g/version/2/geotype/point/lon/'\n                + lon + '/lat/' + lat\n                + '/data.json', {method: 'get'})\n                .then((res) => {\n                    return res.json();\n                })\n                .then((json) => {\n                    const current = json.timeSeries[1];\n                    const temperature = current.parameters[11].values[0];\n                    this.setState({\n                        currentWeather: {\n                            time: new Date(current.validTime).toDateString(),\n                            temperature: temperature\n                        }\n                    }, () => {\n                        const toSave: Partial<WeatherState> = {\n                            currentWeather: this.state.currentWeather,\n                            lastUpdated: new Date()\n                        };\n                        localStorage.setItem(this.symbol.toString(), JSON.stringify(toSave));\n                    })\n                })\n        }\n    }\n\n    componentDidUpdate(props: WeatherProps) {\n        if((props.location !== this.props.location) || (this.state.lastUpdated && shouldBeRefreshed(this.state.lastUpdated))){\n            this.checkWeather();\n        }\n        const stored = JSON.parse(localStorage.getItem(this.symbol.toString()) as string);\n        if (stored && stored.lastUpdated) {\n            if(shouldBeRefreshed(stored.lastUpdated)){\n                this.checkWeather();\n            } else if(JSON.stringify(stored.currentWeather) !== JSON.stringify(this.state.currentWeather)){\n                this.setState(stored);\n            }\n        }\n    }\n\n    render() {\n        const currentWeather = this.state.currentWeather;\n        return (\n            <div className=\"weather mb-3\">\n                {currentWeather.temperature\n                    ?\n                    <div>\n                        <Image className=\"mb-1\" src={process.env.PUBLIC_URL + '/weather.png'} fluid/>\n                        <p><b>Temperature:</b>{currentWeather.temperature}°C</p>\n                    </div>\n                    :\n                    <Spinner animation=\"border\" role=\"status\">\n                    <span className=\"sr-only\">Loading...</span>\n                    </Spinner>}\n            </div>\n        )\n    }\n}","import React, { useEffect, useState } from \"react\";\nimport Jumbotron from \"react-bootstrap/esm/Jumbotron\";\nimport Container from \"react-bootstrap/esm/Container\";\nimport { ContainerCard } from \"./card/ContainerCard\";\nimport Button from \"react-bootstrap/esm/Button\";\nimport { Header } from \"./Header\";\nimport { Weather } from \"./Weather\";\nimport CardColumns from \"react-bootstrap/esm/CardColumns\";\n\n\nexport interface HomeState {\n    rowCount: number;\n    location: GeolocationPosition | undefined\n}\n\nenum VIEW_MODE {\n    CARDS,\n    NORMAL\n}\n\nexport const Home = (): JSX.Element => {\n    const [rowCount, setRowCount] = useState(1);\n    const [location, setLocation] = useState<GeolocationPosition | undefined>(undefined);\n    const [viewMode, setViewMode] = useState(VIEW_MODE.NORMAL);\n\n    useEffect(() => {\n        navigator.geolocation.getCurrentPosition(loc => setLocation(loc))\n        fetch('https://homepage-be.herokuapp.com/wakeup').then(r => console.log(\"told backend to stop snoozing: \" + r.status));\n    }, [])\n\n    const buildRows = (rowCount: number) => {\n        let rows = [];\n        for (let i = 1; i <= rowCount; i++) {\n            rows.push(\n                buildCols(3, i)\n            )\n        }\n        return rows;\n    }\n\n    const buildCols = (colCount: number, row: number) => {\n        let cols = [];\n        for (let i = 1; i <= colCount; i++) {\n            const id = row * i;\n            cols.push(\n                <ContainerCard key={id} id={id} />\n            )\n        }\n        return cols;\n    }\n\n    const addRow = () => {\n        setRowCount(rowCount + 1);\n    }\n\n    const deleteRow = () => {\n        if (rowCount > 0) {\n            setRowCount(rowCount - 1);\n        }\n    }\n\n\n    return (\n        <div>\n            <Header />\n            <Container fluid className={\"d-flex flex-column\"}>\n                <Jumbotron className=\"text-center\" fluid>\n                    <Container>\n                        <Weather location={location} />\n                        <h1 className=\"heading\">Simply the best homepage in the world</h1>\n                        <Button className={\"mx-1 my-2\"} color={\"primary\"} onClick={addRow}>Add</Button>\n                        <Button className={\"my-2\"} variant=\"outline-secondary\" onClick={deleteRow}>Delete</Button>\n                    </Container>\n                </Jumbotron>\n            </Container>\n            <Container className=\"py-3 bg-light h-100\">\n                <CardColumns>\n                    {\n                        viewMode === VIEW_MODE.NORMAL\n                            ? <></>\n                            : buildRows(rowCount)\n                    }\n                </CardColumns>\n            </Container>\n        </div>\n    )\n\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Home} from './components/Home';\nimport './css/style.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<Home/>, document.getElementById('root'));\n"],"sourceRoot":""}