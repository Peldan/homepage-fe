{"version":3,"sources":["constants.ts","components/ModalWindow.tsx","helper.ts","components/ContentBox.tsx","components/Header.tsx","components/Weather.tsx","components/Home.tsx","index.tsx"],"names":["RSS_PRESETS","title","url","ModalWindow","props","state","handleInput","bind","e","this","setState","target","value","presets","map","preset","DropdownItem","onClick","onConfirm","Modal","show","isOpen","onHide","onClose","Header","closeButton","Title","Body","Tabs","defaultActiveKey","id","Tab","eventKey","DropdownButton","variant","className","htmlFor","InputGroup","FormControl","onChange","Footer","Button","disabled","length","React","Component","shouldBeRefreshed","lastRefreshed","Date","now","getMilliseconds","ContentBox","showModal","rssFeed","currentlyViewing","amountOfPages","activePage","lastUpdated","undefined","fetching","openModal","closeModal","clearData","getRSSFeed","populatePage","localStorage","setItem","String","JSON","stringify","fetch","method","body","then","res","json","Math","ceil","toSave","locallyStoredJson","getItem","savedState","parse","console","log","prevState","key","index","div","floor","mod","slice","Exception","clear","rss","dto","Card","href","CardImg","src","imgUrl","description","pages","i","push","Pagination","Item","active","Spinner","animation","role","size","Navbar","bg","Weather","symbol","currentWeather","time","temperature","checkWeather","Symbol","location","coords","lat","round","latitude","pow","lon","longitude","current","timeSeries","parameters","values","validTime","toDateString","toString","stored","Image","process","fluid","Home","rowCount","addRow","deleteRow","navigator","geolocation","getCurrentPosition","loc","r","status","count","row","cols","rows","buildCols","buildRows","Container","Jumbotron","color","CardColumns","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.79cdda6c.chunk.js","sourcesContent":["export const REFRESH_INTERVAL = 1000 * 60 * 5; //5 minutes\r\n\r\nexport interface RSS_PRESET {\r\n    title: string,\r\n    url: string\r\n}\r\n\r\nexport const RSS_PRESETS: RSS_PRESET[] = [\r\n    {title: \"Aftonbladet\", url: \"https://rss.aftonbladet.se/rss2/small/pages/sections/nyheter/  \"},\r\n    {title: \"SVT Nyheter\", url: \"http://www.svt.se/nyheter/rss.xml\"},\r\n    {title: \"SvD\", url: \"http://www.svd.se/?service=rss\"},\r\n    {title: \"Dagens Industri\", url: \"https://digital.di.se/rss\"},\r\n];","import {Modal} from \"react-bootstrap\";\r\nimport React from \"react\";\r\nimport Button from \"react-bootstrap/esm/Button\";\r\nimport {FormControl, InputGroup, Tab, Dropdown} from \"react-bootstrap/esm\";\r\nimport Tabs from \"react-bootstrap/esm/Tabs\";\r\nimport DropdownButton from \"react-bootstrap/esm/DropdownButton\";\r\nimport {RSS_PRESET, RSS_PRESETS} from \"../constants\";\r\nimport DropdownItem from \"react-bootstrap/esm/DropdownItem\";\r\n\r\nexport interface ModalWindowProps {\r\n    title: string;\r\n    onConfirm: (...args: any[]) => any;\r\n    onClose: (...args: any[]) => any;\r\n    isOpen: boolean;\r\n}\r\n\r\nexport interface ModalWindowState {\r\n    url: string\r\n}\r\n\r\nexport class ModalWindow extends React.Component<ModalWindowProps, ModalWindowState> {\r\n\r\n    constructor(props: ModalWindowProps) {\r\n        super(props);\r\n        this.state = {\r\n            url: \"\"\r\n        };\r\n        this.handleInput = this.handleInput.bind(this);\r\n    }\r\n\r\n    handleInput(e: any) {\r\n        this.setState({url: e.target.value});\r\n    }\r\n\r\n    render() {\r\n\r\n        const presets = RSS_PRESETS.map((preset) => {\r\n            return (\r\n                <DropdownItem onClick={() => this.props.onConfirm(preset.url)}>\r\n                    {preset.title}\r\n                </DropdownItem>\r\n            )\r\n        });\r\n\r\n        return (\r\n            <Modal show={this.props.isOpen} onHide={this.props.onClose}>\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title>{this.props.title}</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <Tabs defaultActiveKey=\"preset\" id=\"modal-tabs\">\r\n                        <Tab eventKey=\"preset\" title=\"Preset\">\r\n                            <DropdownButton variant=\"primary\" className=\"mt-4\" id=\"dropdown-basic-button\" title=\"Välj nyhetssida\">\r\n                                {presets}\r\n                            </DropdownButton>\r\n                        </Tab>\r\n                        <Tab eventKey=\"custom\" title=\"Custom\">\r\n                            <label className=\"mt-3\" htmlFor=\"basic-url\">RSS URL</label>\r\n                            <InputGroup className=\"mb-3\">\r\n                                <FormControl onChange={this.handleInput} id=\"basic-url\"/>\r\n                            </InputGroup>\r\n                        </Tab>\r\n                    </Tabs>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button variant=\"secondary\" onClick={this.props.onClose}>Close</Button>\r\n                    <Button variant=\"primary\" disabled={this.state.url.length > 5} onClick={() => this.props.onConfirm(this.state.url)}>Save changes</Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n        );\r\n    }\r\n}","import {REFRESH_INTERVAL} from \"./constants\";\r\n\r\nexport function shouldBeRefreshed(lastRefreshed: Date): boolean {\r\n    if(!lastRefreshed){\r\n        return true;\r\n    }\r\n    return Date.now() - (new Date(lastRefreshed)).getMilliseconds() >= REFRESH_INTERVAL;\r\n}\r\n","import React from \"react\";\r\nimport {Button, Card, Image, Pagination, Row} from \"react-bootstrap/esm/\";\r\nimport {ModalWindow} from \"./ModalWindow\";\r\nimport {RssFeedDto} from \"../schema\";\r\nimport {shouldBeRefreshed} from \"../helper\";\r\nimport CardBody from \"react-bootstrap/esm/Card\";\r\nimport CardFooter from \"react-bootstrap/esm/Card\"\r\nimport CardImg from \"react-bootstrap/esm/CardImg\";\r\nimport Spinner from \"react-bootstrap/esm/Spinner\";\r\n\r\nexport interface ContentBoxState {\r\n    showModal: boolean;\r\n    rssFeed: RssFeedDto[];\r\n    currentlyViewing: RssFeedDto[];\r\n    amountOfPages: number;\r\n    activePage: number;\r\n    lastUpdated: Date | undefined;\r\n    url: string;\r\n    fetching: boolean;\r\n}\r\n\r\n\r\nexport interface ContentBoxProps {\r\n    id: number,\r\n}\r\n\r\n\r\nfunction defaultState(): ContentBoxState {\r\n    return {\r\n        showModal: false,\r\n        rssFeed: [],\r\n        currentlyViewing: [],\r\n        amountOfPages: 0,\r\n        activePage: 1,\r\n        lastUpdated: undefined,\r\n        url: \"\",\r\n        fetching: false\r\n    }\r\n}\r\n\r\n\r\nexport class ContentBox extends React.Component<ContentBoxProps, ContentBoxState> {\r\n\r\n    constructor(props: ContentBoxProps) {\r\n        super(props);\r\n        this.state = defaultState();\r\n        this.openModal = this.openModal.bind(this);\r\n        this.closeModal = this.closeModal.bind(this);\r\n        this.clearData = this.clearData.bind(this);\r\n        this.getRSSFeed = this.getRSSFeed.bind(this);\r\n        this.populatePage = this.populatePage.bind(this);\r\n    }\r\n\r\n    openModal() {\r\n        this.setState({showModal: true});\r\n    }\r\n\r\n    closeModal() {\r\n        this.setState({showModal: false});\r\n    }\r\n\r\n    clearData() {\r\n        this.setState(defaultState());\r\n        localStorage.setItem(String(this.props.id), JSON.stringify({}));\r\n    }\r\n\r\n    getRSSFeed(url: string) {\r\n        this.closeModal();\r\n        this.setState({fetching: true});\r\n        fetch('https://homepage-be.herokuapp.com/rss', {\r\n            method: \"POST\",\r\n            body: url\r\n        }).then((res) => {\r\n            return res.json();\r\n        }).then((json: RssFeedDto[]) => {\r\n            const now = new Date();\r\n            this.setState({\r\n                rssFeed: json,\r\n                amountOfPages: Math.ceil(json.length / 3),\r\n                lastUpdated: now,\r\n                url: url,\r\n                fetching: false\r\n            }, () => {\r\n                const toSave: Partial<ContentBoxState> = {\r\n                    rssFeed: json,\r\n                    lastUpdated: now,\r\n                    url: url\r\n                };\r\n                localStorage.setItem(String(this.props.id), JSON.stringify(toSave));\r\n                this.populatePage(1);\r\n            })\r\n        })\r\n    }\r\n\r\n    componentDidMount() {\r\n        const locallyStoredJson = localStorage.getItem(String(this.props.id));\r\n        if (locallyStoredJson) {\r\n            const savedState: Partial<ContentBoxState> = JSON.parse(locallyStoredJson);\r\n            console.log(savedState);\r\n            if (savedState.lastUpdated && savedState.url && savedState.url.length > 5 && shouldBeRefreshed(savedState.lastUpdated)) {\r\n                this.getRSSFeed(savedState.url);\r\n            } else {\r\n                this.setState(prevState => ({\r\n                    ...prevState, ...savedState,\r\n                }), () => {\r\n                    this.setState({amountOfPages: Math.ceil(this.state.rssFeed.length / 3)}, () => {\r\n                        this.populatePage(1);\r\n                    });\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    populatePage(key: number) {\r\n        const div = Math.floor(this.state.rssFeed.length / this.state.amountOfPages);\r\n        const mod = this.state.rssFeed.length % this.state.amountOfPages;\r\n        let index: number;\r\n        if (key >= (this.state.amountOfPages - mod)) {\r\n            index = (div + 1) * (key - 1);\r\n        } else {\r\n            index = div * (key - 1);\r\n        }\r\n        console.log(this.state.rssFeed);\r\n        try {\r\n            this.setState({currentlyViewing: this.state.rssFeed.slice(index, index + 3), activePage: key});\r\n        } catch (Exception){\r\n            localStorage.clear();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const rss = this.state.currentlyViewing.map((dto) => {\r\n            return (\r\n                <Card key={dto.url} className={\"border-0\"}>\r\n                    <h1 className=\"heading\"><a href={dto.url}>{dto.title}</a></h1>\r\n                    <CardImg src={dto.imgUrl}/>\r\n                    <p>{dto.description}</p>\r\n                </Card>\r\n            )\r\n        });\r\n\r\n        let pages = [];\r\n        for (let i = 1; i <= this.state.amountOfPages; i++) {\r\n            pages.push(\r\n                <Pagination.Item variant=\"dark\" key={i} active={this.state.activePage === i}\r\n                                 onClick={() => this.populatePage(i)}>\r\n                    {i}\r\n                </Pagination.Item>\r\n            )\r\n        }\r\n\r\n        return (\r\n            <Card>\r\n                <CardBody className=\"card-body column-content border-0\">\r\n                    {this.state.fetching\r\n                        ?\r\n                        <Spinner animation=\"border\" role=\"status\">\r\n                            <span className=\"sr-only\">Loading...</span>\r\n                        </Spinner>\r\n                        :\r\n                        <>\r\n                            <ModalWindow title=\"Add RSS feed\" isOpen={this.state.showModal} onClose={this.closeModal}\r\n                                         onConfirm={this.getRSSFeed}/>\r\n                            {rss.length > 0 ? rss : <h1 className=\"heading\">Empty :(</h1>}\r\n                        </>\r\n                    }\r\n                </CardBody>\r\n                <CardFooter className={\"d-flex justify-content-between align-items-center border-0\"}>\r\n                    <Pagination>{pages}</Pagination>\r\n                    {rss.length > 0 ?\r\n                        <Button className={\"mb-2\"} variant=\"danger\" size=\"sm\"\r\n                                onClick={this.clearData}>Empty</Button>\r\n                        :\r\n                        <Button className={\"mb-2\"} variant=\"light\" size=\"sm\"\r\n                                onClick={this.openModal}>Add</Button>\r\n                    }\r\n                </CardFooter>\r\n            </Card>\r\n        )\r\n    }\r\n}","import Navbar from \"react-bootstrap/esm/Navbar\";\r\nimport Container from \"react-bootstrap/esm/Container\";\r\nimport Collapse from \"react-bootstrap/esm/Collapse\";\r\nimport React from \"react\";\r\n\r\nexport class Header extends React.Component<any, any> {\r\n    render() {\r\n        return (\r\n            <header>\r\n                <Navbar bg=\"dark\">\r\n                    <a className=\"navbar-brand\" href=\"#\">⌂</a>\r\n                </Navbar>\r\n            </header>\r\n        );\r\n    }\r\n}","import React from \"react\";\r\nimport Image from \"react-bootstrap/esm/Image\";\r\nimport {shouldBeRefreshed} from \"../helper\";\r\nimport Spinner from \"react-bootstrap/esm/Spinner\";\r\n\r\nexport interface WeatherReport {\r\n    time: string,\r\n    temperature: string\r\n}\r\n\r\nexport interface WeatherState {\r\n    currentWeather: WeatherReport,\r\n    lastUpdated: Date | undefined\r\n}\r\n\r\nexport interface WeatherProps {\r\n    location: Position | undefined\r\n}\r\n\r\nfunction defaultState(): WeatherState {\r\n    return {\r\n        currentWeather: {time: \"\", temperature: \"\"},\r\n        lastUpdated: undefined\r\n    }\r\n}\r\n\r\nexport class Weather extends React.Component<WeatherProps, WeatherState> {\r\n\r\n    private symbol: Symbol;\r\n\r\n    constructor(props: WeatherProps) {\r\n        super(props);\r\n        this.state = defaultState();\r\n        this.checkWeather = this.checkWeather.bind(this);\r\n        this.symbol = Symbol();\r\n    }\r\n\r\n    checkWeather() {\r\n        if (this.props.location && this.props.location.coords) {\r\n            const coords = this.props.location.coords;\r\n            const lat = Math.round(coords.latitude * Math.pow(10, 6)) / Math.pow(10, 6);\r\n            const lon = Math.round(coords.longitude * Math.pow(10, 6)) / Math.pow(10, 6);\r\n            fetch('https://opendata-download-metfcst.smhi.se/api/category/pmp3g/version/2/geotype/point/lon/'\r\n                + lon + '/lat/' + lat\r\n                + '/data.json', {method: 'get'})\r\n                .then((res) => {\r\n                    return res.json();\r\n                })\r\n                .then((json) => {\r\n                    const current = json.timeSeries[1];\r\n                    const temperature = current.parameters[11].values[0];\r\n                    this.setState({\r\n                        currentWeather: {\r\n                            time: new Date(current.validTime).toDateString(),\r\n                            temperature: temperature\r\n                        }\r\n                    }, () => {\r\n                        const toSave: Partial<WeatherState> = {\r\n                            currentWeather: this.state.currentWeather,\r\n                            lastUpdated: new Date()\r\n                        };\r\n                        localStorage.setItem(this.symbol.toString(), JSON.stringify(toSave));\r\n                    })\r\n                })\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(props: WeatherProps) {\r\n        if(props.location !== this.props.location || this.state.lastUpdated && shouldBeRefreshed(this.state.lastUpdated)){\r\n            this.checkWeather();\r\n        }\r\n        const stored = JSON.parse(localStorage.getItem(this.symbol.toString()) as string);\r\n        if (stored && stored.lastUpdated) {\r\n            if(shouldBeRefreshed(stored.lastUpdated)){\r\n                this.checkWeather();\r\n            } else if(JSON.stringify(stored.currentWeather) != JSON.stringify(this.state.currentWeather)){\r\n                this.setState(stored);\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const currentWeather = this.state.currentWeather;\r\n        return (\r\n            <div className=\"weather mb-3\">\r\n                {currentWeather.temperature\r\n                    ?\r\n                    <div>\r\n                        <Image className=\"mb-1\" src={process.env.PUBLIC_URL + '/weather.png'} fluid/>\r\n                        <p><b>Temperature:</b>{currentWeather.temperature}°C</p>\r\n                    </div>\r\n                    :\r\n                    <Spinner animation=\"border\" role=\"status\">\r\n                    <span className=\"sr-only\">Loading...</span>\r\n                    </Spinner>}\r\n            </div>\r\n        )\r\n    }\r\n}","import React from \"react\";\r\nimport Jumbotron from \"react-bootstrap/esm/Jumbotron\";\r\nimport Container from \"react-bootstrap/esm/Container\";\r\nimport {ContentBox} from \"./ContentBox\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Button from \"react-bootstrap/esm/Button\";\r\nimport {Header} from \"./Header\";\r\nimport {Weather} from \"./Weather\";\r\nimport CardColumns from \"react-bootstrap/esm/CardColumns\";\r\n\r\n\r\nexport interface HomeState {\r\n    rowCount: number;\r\n    location: Position | undefined\r\n}\r\n\r\nfunction defaultState(): HomeState {\r\n    return {\r\n        rowCount: 1,\r\n        location: undefined\r\n    }\r\n}\r\n\r\nexport class Home extends React.Component<{}, HomeState> {\r\n\r\n    constructor() {\r\n        super({});\r\n        this.state = defaultState();\r\n        this.addRow = this.addRow.bind(this);\r\n        this.deleteRow = this.deleteRow.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        navigator.geolocation.getCurrentPosition((loc) => {\r\n            this.setState({location: loc});\r\n        });\r\n        fetch('https://homepage-be.herokuapp.com/wakeup').then(r => console.log(\"told backend to stop snoozing: \" + r.status));\r\n    }\r\n\r\n    addRow() {\r\n        this.setState({rowCount: this.state.rowCount + 1});\r\n    }\r\n\r\n    deleteRow() {\r\n        this.setState({rowCount: this.state.rowCount - 1});\r\n    }\r\n\r\n    buildCols(count: number, row: number) {\r\n        let cols = [];\r\n        for (let i = 1; i <= count; i++) {\r\n            cols.push(\r\n                <ContentBox id={row * i}/>\r\n            )\r\n        }\r\n        return cols;\r\n    }\r\n\r\n    buildRows(count: number) {\r\n        let rows = [];\r\n        for (let i = 1; i <= count; i++) {\r\n            rows.push(\r\n                this.buildCols(3, i)\r\n            )\r\n        }\r\n        return rows;\r\n    }\r\n\r\n    render() {\r\n        const rows = this.buildRows(this.state.rowCount);\r\n        return (\r\n            <div>\r\n                <Header/>\r\n                <Container fluid className={\"d-flex flex-column\"}>\r\n                    <Jumbotron className=\"text-center\" fluid>\r\n                        <Container>\r\n                            <Weather location={this.state.location}/>\r\n                            <h1 className=\"heading\">Simply the best homepage in the world</h1>\r\n                            <Button className={\"mx-1 my-2\"} color={\"primary\"} onClick={this.addRow}>Add</Button>\r\n                            <Button className={\"my-2\"} variant=\"outline-secondary\" onClick={this.deleteRow}>Delete</Button>\r\n                        </Container>\r\n                    </Jumbotron>\r\n                </Container>\r\n                <Container className=\"py-3 bg-light h-100\">\r\n                    <CardColumns>\r\n                        {rows}\r\n                    </CardColumns>\r\n                </Container>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Home} from './components/Home';\nimport './css/style.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<Home/>, document.getElementById('root'));\n"],"sourceRoot":""}